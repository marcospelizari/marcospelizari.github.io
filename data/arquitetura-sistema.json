{
    "title": "Arquitetura de Sistema",
    "description": "Arquitetura de sistema define como um software é organizado, conectando suas partes para atender aos requisitos. Este guia cobre conceitos fundamentais para desenvolvedores juniores.",
    "subsections": [
        {
            "subtitle": "O que é arquitetura de sistema?",
            "description": "Como um sistema é estruturado e suas partes principais.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Resposta Ideal: Arquitetura de sistema é o plano que define a estrutura, componentes e interações de um software para atender requisitos como desempenho e escalabilidade. Inclui frontend (interface do usuário), backend (lógica e APIs) e banco de dados (armazenamento de dados). Essas partes se conectam, como o frontend chamando APIs do backend, que acessa o banco. Uma boa arquitetura facilita manutenção e expansão.<br>Resposta Simples: É o plano do software, com frontend (tela), backend (lógica) e banco de dados (dados).",
                    "code": ""
                }
            ]
        },
        {
            "subtitle": "Frontend, backend e banco de dados",
            "description": "Diferenças entre as principais camadas de um sistema.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Resposta Ideal: Frontend é a interface que o usuário vê, como um site ou app, feita com HTML, CSS e JavaScript. Backend é a lógica do servidor, como processar pedidos, usando Java ou Python. Banco de dados armazena informações, como usuários, em sistemas como MySQL ou MongoDB. O frontend se comunica com o backend via APIs, e o backend acessa o banco para manipular dados.<br>Resposta Simples: Frontend é a tela, backend é a lógica, e banco de dados guarda os dados.",
                    "code": ""
                }
            ]
        },
        {
            "subtitle": "O que é arquitetura cliente-servidor?",
            "description": "Como clientes e servidores interagem em um sistema.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Resposta Ideal: Arquitetura cliente-servidor divide o sistema em cliente, que faz requisições (ex.: navegador ou app), e servidor, que responde (ex.: processa dados e retorna). Por exemplo, ao acessar um site, o navegador (cliente) pede a página ao servidor, que a entrega. Essa separação melhora a manutenção e escalabilidade.<br>Resposta Simples: Cliente (como um app) pede algo, e o servidor responde com os dados.",
                    "code": ""
                }
            ]
        },
        {
            "subtitle": "O que é o padrão MVC?",
            "description": "Como o padrão MVC organiza aplicações.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Resposta Ideal: MVC (Model-View-Controller) separa uma aplicação em três partes: Model (dados e lógica, ex.: informações de um produto), View (interface, ex.: tela do usuário) e Controller (intermediário que processa ações do usuário, atualizando Model ou View). Essa separação organiza o código, facilitando manutenção e testes. É comum em frameworks como Spring Boot.<br>Resposta Simples: MVC divide o código em dados (Model), tela (View) e ações (Controller) para ficar organizado.",
                    "code": "// Exemplo em Spring Boot\n@RestController\npublic class ProdutoController { // Controller\n    @GetMapping(\"/produtos\")\n    public List<Produto> listar() {\n        return produtoService.listar(); // Model\n    }\n}\n// View seria o frontend consumindo a API"
                }
            ]
        },
        {
            "subtitle": "Como APIs conectam sistemas?",
            "description": "O papel das APIs na integração de componentes.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Resposta Ideal: APIs (Interfaces de Programação de Aplicações) permitem que componentes do sistema, como frontend e backend, se comuniquem por meio de requisições e respostas, geralmente via HTTP. Na arquitetura, APIs atuam como pontes, permitindo independência entre partes. Por exemplo, o frontend pede dados ao backend via uma API REST, que retorna JSON.<br>Resposta Simples: APIs são pontes que deixam frontend e backend conversarem, como pedir uma lista de produtos.",
                    "code": ""
                }
            ]
        },
        {
            "subtitle": "Monolítica vs. Microserviços",
            "description": "Diferenças entre arquiteturas monolítica e de microserviços.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Resposta Ideal: Arquitetura monolítica é um sistema único onde todas as partes (frontend, backend, banco) estão integradas. É simples, mas difícil de escalar ou alterar. Microserviços dividem o sistema em serviços independentes (ex.: um para usuários, outro para pedidos), que se comunicam por APIs. São flexíveis e escaláveis, mas complexos de gerenciar.<br>Resposta Simples: Monolítica é tudo junto, mais simples. Microserviços são pedaços separados, mais fáceis de crescer, mas complicados.",
                    "code": ""
                }
            ]
        },
        {
            "subtitle": "O que é arquitetura em camadas?",
            "description": "Como organizar o sistema em camadas funcionais.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Resposta Ideal: Arquitetura em camadas organiza o sistema em níveis com responsabilidades distintas, como apresentação (frontend), negócios (lógica) e dados (banco). Cada camada só se comunica com a adjacente, reduzindo acoplamento e facilitando manutenção. Por exemplo, em uma API Spring Boot, a camada de controladores (apresentação) chama serviços (negócios), que acessam repositórios (dados).<br>Resposta Simples: É dividir o sistema em partes, como interface, lógica e dados, para ficar mais organizado.",
                    "code": "// Exemplo em Spring Boot\n@Controller // Camada de apresentação\npublic class ProdutoController {\n    @Autowired\n    private ProdutoService service; // Camada de negócios\n\n    @GetMapping(\"/produtos\")\n    public String listar(Model model) {\n        model.addAttribute(\"produtos\", service.listar());\n        return \"lista-produtos\"; // View\n    }\n}\n\n@Service // Camada de negócios\npublic class ProdutoService {\n    @Autowired\n    private ProdutoRepository repository; // Camada de dados\n\n    public List<Produto> listar() {\n        return repository.findAll();\n    }\n}"
                }
            ]
        }
    ]
}