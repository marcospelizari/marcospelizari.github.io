{
    "title": "Arquitetura de Sistema",
    "description": "Arquitetura define como sistemas são organizados para atender requisitos, conectando componentes como frontend e backend.",
    "subsections": [
        {
            "subtitle": "Componentes de Sistemas",
            "description": "Como frontend, backend e banco interagem.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Frontend (interface) faz requisições ao backend (lógica) via APIs (Application Programming Interfaces), que acessa o banco de dados. Essa separação facilita manutenção e escalabilidade.",
                    "code": ""
                }
            ]
        },
        {
            "subtitle": "Cliente-Servidor e MVC",
            "description": "Modelos comuns de arquitetura.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Na arquitetura cliente-servidor, o cliente (ex.: navegador) pede dados ao servidor. MVC (Model-View-Controller) separa dados, interface e lógica, comum em Spring Boot.",
                    "code": "@RestController\npublic class ProdutoController {\n    @GetMapping(\"/produtos\")\n    public List<Produto> listar() { return service.listar(); }\n}"
                }
            ]
        },
        {
            "subtitle": "Monolítica vs. Microserviços",
            "description": "Diferenças entre arquiteturas.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Arquitetura monolítica integra todas as partes em um sistema único, simples, mas difícil de escalar. Microserviços dividem em serviços independentes, conectados por APIs, mais flexíveis.",
                    "code": ""
                }
            ]
        },
        {
            "subtitle": "Arquitetura em Camadas",
            "description": "Como organizar sistemas funcionalmente.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Camadas separam responsabilidades: apresentação (controller), negócios (service) e dados (repository). Reduz acoplamento e facilita manutenção.",
                    "code": "@Service\npublic class ProdutoService {\n    @Autowired\n    private ProdutoRepository repository;\n    public List<Produto> listar() { return repository.findAll(); }\n}"
                }
            ]
        },
        {
            "subtitle": "Recursos para Prática",
            "description": "Ferramentas para aprender arquitetura.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Use Draw.io (diagramas), C4 Model (documentação), Martin Fowler (artigos) e Udemy (cursos de arquitetura).",
                    "code": ""
                }
            ]
        }
    ]
}