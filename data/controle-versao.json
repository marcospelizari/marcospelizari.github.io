{
  "title": "Controle de Versão (Git)",
  "description": "Conceitos básicos de versionamento para entrevistas.",
  "subsections": [
    {
      "subtitle": "O que é Git?",
      "description": "Definição e propósito do Git.",
      "examples": [
        {
          "title": "Explicação",
          "explanation": "Git é um sistema de controle de versão distribuído que registra mudanças no código ao longo do tempo. Ele permite colaboração entre desenvolvedores, histórico detalhado e rollback de alterações.",
          "code": "git init   # inicia repositório\n git status # mostra estado atual",
          "interview_question": "Explique o que é Git e por que usamos controle de versão."
        }
      ]
    },
    {
      "subtitle": "Clone, Commit e Push",
      "description": "Fluxo inicial de versionamento.",
      "examples": [
        {
          "title": "Explicação",
          "explanation": "Clone baixa um repositório existente. Commit salva mudanças localmente no histórico. Push envia commits para o repositório remoto, compartilhando com outros.",
          "code": "git clone url\n git add .\n git commit -m \"msg\"\n git push",
          "interview_question": "Qual a diferença entre commit e push?"
        }
      ]
    },
    {
      "subtitle": "Branch e Merge",
      "description": "Trabalho paralelo e integração.",
      "examples": [
        {
          "title": "Explicação",
          "explanation": "Branches permitem desenvolver novas features ou corrigir bugs sem impactar o código principal. Merge integra as mudanças de uma branch em outra.",
          "code": "git checkout -b nova-feature\n git merge nova-feature",
          "interview_question": "Por que usamos branches no Git?"
        }
      ]
    },
    {
      "subtitle": "Merge vs Rebase",
      "description": "Formas de integrar histórico.",
      "examples": [
        {
          "title": "Explicação",
          "explanation": "Merge preserva o histórico criando um commit de junção. Rebase reescreve o histórico para deixá-lo linear. Merge é mais seguro; rebase mantém histórico limpo em times que preferem linearidade.",
          "code": "git merge main\n git rebase main",
          "interview_question": "Quando você prefere rebase em vez de merge?"
        }
      ]
    }
  ]
}
