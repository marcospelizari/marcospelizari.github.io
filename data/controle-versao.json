{
    "title": "Controle de Versão (Git)",
    "description": "Git é um VCS (Version Control System) essencial para gerenciar mudanças no código e colaboração em equipe.",
    "subsections": [
        {
            "subtitle": "O que é Git?",
            "description": "Introdução ao controle de versão.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Git é um VCS (Version Control System) que rastreia alterações no código, permitindo colaboração e histórico. É usado com plataformas como GitHub para gerenciar projetos.",
                    "code": ""
                }
            ]
        },
        {
            "subtitle": "Commits e Branches",
            "description": "Como salvar mudanças e trabalhar em paralelo.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Commits salvam alterações com mensagens descritivas. Branches criam versões paralelas do código, como feature/nova-api, mescladas com merge.",
                    "code": "git add .\ngit commit -m \"Adiciona nova API\"\ngit branch feature/nova-api\ngit checkout feature/nova-api\ngit merge feature/nova-api"
                }
            ]
        },
        {
            "subtitle": "Repositórios Remotos e Pull Requests",
            "description": "Como colaborar em equipe.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Repositórios remotos (ex.: GitHub) armazenam o projeto online. PRs (Pull Requests) propõem mudanças para revisão antes do merge.",
                    "code": "git clone https://github.com/usuario/projeto.git\ngit push origin main\ngit pull origin main"
                }
            ]
        },
        {
            "subtitle": "Conflitos e Reversão",
            "description": "Como resolver problemas no Git.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Conflitos ocorrem quando mudanças colidem; resolva editando o código. Use git revert ou git reset para desfazer commits.",
                    "code": "<<<<<<< HEAD\ntexto = \"Versão 1\";\n=======\ntexto = \"Versão 2\";\n>>>>>>> feature/nova-api\n// Resolver: texto = \"Versão Final\";\ngit revert abc123"
                }
            ]
        },
        {
            "subtitle": "Monitoramento do Repositório",
            "description": "Como acompanhar mudanças.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Use git status para ver alterações pendentes e git log para o histórico de commits. Isso ajuda a gerenciar o projeto.",
                    "code": "git status\ngit log --oneline"
                }
            ]
        },
        {
            "subtitle": "Recursos para Prática",
            "description": "Ferramentas para aprender Git.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Pratique com Learn Git Branching (tutoriais interativos), GitKraken (interface visual), GitHub (repositórios) e Atlassian Git Tutorials (guias).",
                    "code": ""
                }
            ]
        }
    ]
}