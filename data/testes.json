{
    "title": "Testes",
    "description": "Testes garantem a qualidade do código, cobrindo unitários, integração e validação de APIs.",
    "subsections": [
        {
            "subtitle": "Testes Unitários e Asserções",
            "description": "Como testar partes isoladas.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Testes unitários verificam métodos com JUnit, usando asserções como assertEquals. TDD (Test-Driven Development) escreve testes antes do código.",
                    "code": "@Test\nvoid testSomar() {\n    Calculadora calc = new Calculadora();\n    assertEquals(5, calc.somar(2, 3));\n}"
                }
            ]
        },
        {
            "subtitle": "Testes de Integração",
            "description": "Como testar interações entre componentes.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Testes de integração verificam fluxos entre serviços e bancos com @SpringBootTest. Garantem que componentes funcionem juntos.",
                    "code": "@SpringBootTest\nclass ProdutoServiceTest {\n    @Autowired\n    private ProdutoService service;\n    @Test\n    void testSalvar() {\n        Produto p = new Produto(\"Notebook\", 5000);\n        assertNotNull(service.salvar(p).getId());\n    }\n}"
                }
            ]
        },
        {
            "subtitle": "Mocking",
            "description": "Como simular dependências.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Mocking cria objetos falsos com Mockito para testar isoladamente, simulando bancos ou APIs (Application Programming Interfaces).",
                    "code": "@Test\nvoid testSalvar() {\n    ProdutoRepository repo = Mockito.mock(ProdutoRepository.class);\n    ProdutoService service = new ProdutoService(repo);\n    service.salvar(new Produto(\"Celular\", 2000));\n    Mockito.verify(repo).save(any());\n}"
                }
            ]
        },
        {
            "subtitle": "Testes de API e Carga",
            "description": "Como validar APIs e performance.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Teste APIs com RestAssured, verificando status e JSON. Use JMeter para testes de carga, simulando múltiplas requisições.",
                    "code": "@Test\nvoid testGetProdutos() {\n    given().when().get(\"/api/produtos\").then().statusCode(200);\n}"
                }
            ]
        },
        {
            "subtitle": "Cobertura de Testes",
            "description": "Como medir qualidade dos testes.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Cobertura mede o percentual de código testado com ferramentas como JaCoCo. Mire 80%+, mas priorize cenários críticos.",
                    "code": ""
                }
            ]
        },
        {
            "subtitle": "Recursos para Prática",
            "description": "Ferramentas para aprender testes.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Use JUnit (tutoriais), Mockito (mocking), Baeldung (artigos) e Testcontainers (integração).",
                    "code": ""
                }
            ]
        }
    ]
}