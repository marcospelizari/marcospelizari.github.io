{
  "title": "APIs e Web Services",
  "description": "Conceitos básicos e avançados de comunicação entre sistemas, com foco em REST e práticas modernas.",
  "version": "HTTP/1.1, OpenAPI 3.1",
  "resumo": [
    "APIs e Web Services são como uma ponte robusta entre sistemas: uma API (Application Programming Interface) define regras claras para que softwares se comuniquem, expondo funcionalidades e dados através de protocolos como HTTP, enquanto Web Services implementam essa comunicação em larga escala, sendo indispensáveis para integrar um frontend de e-commerce com um backend de pedidos ou conectar serviços distintos em uma arquitetura distribuída.",
    "O estilo REST atua como uma estrada bem sinalizada: Representational State Transfer utiliza HTTP para manipular recursos via URLs de forma stateless, empregando métodos como GET para leitura, POST para criação, PUT/PATCH para atualização e DELETE para remoção, com princípios como HATEOAS que adicionam links auto-descritivos, promovendo escalabilidade e permitindo que aplicações como uma API de usuários cresçam sem perder coerência.",
    "Por outro lado, SOAP é como um protocolo formal e estruturado: baseado em XML, oferece trocas de mensagens rígidas com suporte a segurança avançada via WS-Security, sendo preferido em sistemas legados ou corporativos que demandam contratos formais, como serviços bancários, embora sua verbosidade o torne menos ágil que REST para projetos modernos.",
    "Os status codes são como sinais de tráfego na ponte: indicam o resultado de uma requisição com categorias como 2xx para sucesso (ex.: 200 OK, 201 Created), 4xx para erros do cliente (ex.: 400 Bad Request, 401 Unauthorized), e 5xx para falhas do servidor (ex.: 500 Internal Server Error), sendo essenciais para depuração e comunicação clara entre sistemas, como ao criar um recurso em uma API de produtos.",
    "GraphQL surge como um guia personalizado: permite que clientes solicitem exatamente os dados necessários em uma única consulta, eliminando o over-fetching e under-fetching comuns em REST, com um schema único que define tipos e resolvers, tornando-se ideal para aplicações móveis ou sistemas com dados complexos, como um app de notícias que busca títulos e imagens específicas.",
    "A autenticação e autorização são os guardiões dessa ponte: autenticação verifica a identidade com tokens como JWT, que são stateless e compactos, enquanto autorização controla o acesso via roles ou escopos, com OAuth 2.0 gerenciando fluxos de terceiros, sendo crucial proteger dados sensíveis em APIs de e-commerce com HTTPS para evitar interceptações.",
    "A documentação de APIs funciona como um manual detalhado: ferramentas como Swagger/OpenAPI geram documentação interativa a partir de anotações no código, facilitando testes e integração por desenvolvedores ou clientes, sendo uma prática essencial para manter APIs como uma interface de pagamento bem documentada e acessível.",
    "WebSockets são como uma corrente viva que conecta em tempo real: estabelecem conexões bidirecionais persistentes para atualizações instantâneas, como chats ou notificações, contrastando com o modelo request-response do HTTP, e podem ser simplificados com STOMP no Spring, sendo perfeitos para aplicações que exigem interatividade contínua.",
    "Em cenários reais, APIs REST dominam integrações de e-commerce por sua simplicidade, enquanto WebSockets brilham em sistemas de suporte ao cliente com chat ao vivo, e GraphQL se destaca em apps móveis onde a eficiência de dados é crítica, demonstrando a versatilidade dessas tecnologias em arquiteturas modernas.",
    "Para júniores, pratique chamadas HTTP com ferramentas como Postman ou cURL, explore REST com um endpoint simples como /usuarios, e experimente GraphQL com uma consulta básica, começando com projetos pequenos para entender fluxos antes de enfrentar sistemas complexos.",
    "Cuidado com o over-fetching em REST, que pode sobrecarregar o servidor, e sempre valide tokens de autenticação para evitar acessos não autorizados; use HTTPS em produção e documente APIs desde o início para facilitar colaboração em equipe.",
    "Combine REST com WebSockets para aplicações híbridas, como um painel de monitoramento com atualizações ao vivo, e use OpenAPI para manter a documentação alinhada, integrando boas práticas como versionamento (ex.: /v1/usuarios) para gerenciar evoluções.",
    "Em entrevistas, destaque como REST promove escalabilidade com statelessness, explique a diferença entre SOAP e GraphQL com exemplos práticos, e demonstre conhecimento em segurança com JWT ou OAuth, mostrando domínio técnico e contextual."
  ],
  "subsections": [
    {
      "subtitle": "O que é uma API?",
      "description": "Definição geral de APIs.",
      "examples": [
        {
          "title": "Explicação",
          "explanation": "Uma API facilita a integração entre frontend e backend ao definir uma interface padronizada com HTTP, permitindo que o frontend solicite dados ou ações, como listar usuários, enquanto o backend processa e responde, simplificando o desenvolvimento de aplicações web.",
          "code": "curl -X GET https://api.exemplo.com/usuarios/1\n// Exemplo de chamada HTTP para uma API",
          "interview_question": "Como uma API facilita a integração entre um frontend e um backend?",
          "references": ["https://developer.mozilla.org/en-US/docs/Glossary/API"]
        }
      ]
    },
    {
      "subtitle": "REST",
      "description": "Estilo arquitetural para APIs stateless.",
      "examples": [
        {
          "title": "Explicação",
          "explanation": "Os princípios REST, como statelessness e uso de recursos via URLs, promovem escalabilidade ao evitar estado no servidor, permitindo que múltiplos clientes acessem a mesma API, como um serviço de produtos, sem sobrecarga de sessão.",
          "code": "GET /usuarios/1\nPOST /usuarios\n{ \"nome\": \"João\", \"email\": \"joao@email.com\" }\n// Payload JSON para criação",
          "interview_question": "Explique os princípios REST e como eles promovem escalabilidade.",
          "references": ["https://restfulapi.net/"]
        }
      ]
    },
    {
      "subtitle": "SOAP",
      "description": "Protocolo baseado em XML para serviços web.",
      "examples": [
        {
          "title": "Explicação",
          "explanation": "Use SOAP em vez de REST quando o projeto exige segurança avançada (ex.: WS-Security) ou contratos formais, como em sistemas bancários legados, onde a rigidez e a estrutura XML são mais adequadas que a flexibilidade de REST.",
          "code": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap:Body>\n    <getUser>\n      <id>1</id>\n    </getUser>\n  </soap:Body>\n</soap:Envelope>\n// Exemplo de envelope SOAP",
          "interview_question": "Quando usar SOAP em vez de REST em um projeto?",
          "references": ["https://www.w3.org/TR/soap/"]
        }
      ]
    },
    {
      "subtitle": "Status Codes",
      "description": "Códigos de resposta HTTP para comunicação clara.",
      "examples": [
        {
          "title": "Explicação",
          "explanation": "Exemplos incluem 200 OK (sucesso em GET), 201 Created (pós-criação), 400 Bad Request (erro de entrada), 401 Unauthorized (sem autenticação), e 500 Internal Server Error (falha do servidor), usados para indicar resultados e guiar depuração em APIs.",
          "code": "HTTP/1.1 201 Created\nLocation: /usuarios/1\n// Resposta para criação de recurso",
          "interview_question": "Cite exemplos de códigos 2xx, 4xx e 5xx e quando usá-los.",
          "references": ["https://httpstatuses.com/"]
        }
      ]
    },
    {
      "subtitle": "GraphQL",
      "description": "Alternativa flexível ao REST para consultas.",
      "examples": [
        {
          "title": "Explicação",
          "explanation": "GraphQL resolve problemas do REST ao permitir consultas específicas, evitando over-fetching (dados extras) e under-fetching (dados insuficientes), sendo ideal para apps móveis onde a eficiência de dados, como em um feed de notícias, é crítica.",
          "code": "query {\n  user(id: 1) {\n    nome\n    email\n    posts {\n      title\n    }\n  }\n}\n// Consulta GraphQL para usuário e posts",
          "interview_question": "Como GraphQL resolve problemas comuns do REST?",
          "references": ["https://graphql.org/learn/"]
        }
      ]
    },
    {
      "subtitle": "Autenticação e Autorização",
      "description": "Segurança em APIs.",
      "examples": [
        {
          "title": "Explicação",
          "explanation": "JWT é um token stateless para autenticação, enquanto OAuth 2.0 é um framework para autorização com fluxos como acesso de terceiros, sendo JWT mais simples para APIs internas e OAuth ideal para integrações como login via Google.",
          "code": "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n// Header com JWT token em requisição HTTP",
          "interview_question": "Explique a diferença entre JWT e OAuth 2.0 em APIs.",
          "references": ["https://jwt.io/introduction/", "https://oauth.net/2/"]
        }
      ]
    },
    {
      "subtitle": "Documentação de APIs",
      "description": "Geração automática de documentação.",
      "examples": [
        {
          "title": "Explicação",
          "explanation": "Documentar APIs é importante para facilitar uso e manutenção por equipes, e Swagger ajuda gerando docs interativas a partir de anotações, como @Operation, permitindo testes diretos e reduzindo erros de integração.",
          "code": "import io.swagger.v3.oas.annotations.Operation;\n\n@GetMapping(\"/users\")\n@Operation(summary = \"Lista usuários\")\npublic List<User> getUsers() {\n  return userService.findAll();\n}\n// Anotação OpenAPI no Spring",
          "interview_question": "Por que documentar APIs é importante e como o Swagger ajuda?",
          "references": ["https://swagger.io/specification/"]
        }
      ]
    },
    {
      "subtitle": "WebSockets",
      "description": "Comunicação em tempo real.",
      "examples": [
        {
          "title": "Explicação",
          "explanation": "Use WebSockets em vez de polling HTTP quando atualizações em tempo real são necessárias, como chats ou notificações, pois evitam requisições constantes, reduzindo carga no servidor e melhorando a experiência do usuário.",
          "code": "ws://exemplo.com/chat\n// URI WebSocket para conexão em tempo real",
          "interview_question": "Quando usar WebSockets em vez de polling HTTP?",
          "references": ["https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API"]
        }
      ]
    }
  ]
}