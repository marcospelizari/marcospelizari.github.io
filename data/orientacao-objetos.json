{
    "title": "Programação Orientada a Objetos",
    "description": "POO (Programação Orientada a Objetos) organiza o código em objetos que combinam dados e comportamentos, essencial para desenvolvimento em Java.",
    "subsections": [
        {
            "subtitle": "Conceitos de POO",
            "description": "O que é POO e seus pilares.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "POO (Programação Orientada a Objetos) usa objetos para modelar entidades, combinando dados (atributos) e ações (métodos). Seus pilares — encapsulamento, herança, polimorfismo e abstração — promovem organização e reutilização.",
                    "code": "public class Carro {\n    String cor;\n    void acelerar() { System.out.println(\"Acelerando\"); }\n}"
                }
            ]
        },
        {
            "subtitle": "Classes, Objetos e Encapsulamento",
            "description": "Como criar e proteger objetos.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Classes são moldes que definem atributos e métodos; objetos são instâncias criadas com new. Encapsulamento protege dados com private e acesso via getters/setters.",
                    "code": "public class Conta {\n    private double saldo;\n    public void depositar(double valor) { if (valor > 0) saldo += valor; }\n    public double getSaldo() { return saldo; }\n}"
                }
            ]
        },
        {
            "subtitle": "Herança e Composição",
            "description": "Como reutilizar código entre classes.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Herança permite que uma classe herde de outra com extends, reutilizando código. Composição faz um objeto conter outro, promovendo flexibilidade.",
                    "code": "public class Animal {\n    void comer() { System.out.println(\"Comendo\"); }\n}\npublic class Gato extends Animal {\n    void miar() { System.out.println(\"Miau\"); }\n}\npublic class Carro {\n    Motor motor = new Motor(\"V8\");\n}"
                }
            ]
        },
        {
            "subtitle": "Polimorfismo",
            "description": "Como objetos têm comportamentos diferentes.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Polimorfismo permite que objetos de classes diferentes respondam à mesma ação de forma única, usando interfaces ou herança. É útil para flexibilidade.",
                    "code": "public interface Animal {\n    void fazerSom();\n}\npublic class Cachorro implements Animal {\n    public void fazerSom() { System.out.println(\"Latir\"); }\n}\nAnimal c = new Cachorro();\nc.fazerSom(); // Latir"
                }
            ]
        },
        {
            "subtitle": "Abstração e Interfaces",
            "description": "Como simplificar e definir contratos.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Abstração esconde detalhes com classes abstratas ou interfaces. Interfaces definem contratos que classes implementam, permitindo múltiplas implementações desde Java 8.",
                    "code": "public interface Desligavel {\n    default void desligar() { System.out.println(\"Desligado\"); }\n}\npublic class Carro implements Desligavel {\n    void ligar() { System.out.println(\"Ligado\"); }\n}"
                }
            ]
        },
        {
            "subtitle": "Sobrecarga e Sobrescrita",
            "description": "Como redefinir métodos.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Sobrecarga cria métodos com o mesmo nome, mas parâmetros diferentes. Sobrescrita redefine um método herdado com a mesma assinatura.",
                    "code": "public class Calculadora {\n    int somar(int a, int b) { return a + b; }\n    double somar(double a, double b) { return a + b; }\n}\npublic class Cachorro extends Animal {\n    void fazerSom() { System.out.println(\"Latir\"); }\n}"
                }
            ]
        },
        {
            "subtitle": "Recursos para Prática",
            "description": "Ferramentas para aprender POO.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Pratique com Exercism (exercícios de POO), Refactoring.Guru (padrões SOLID - Single Responsibility, Open-Closed, Liskov Substitution, Interface Segregation, Dependency Inversion), Udemy (cursos) e IntelliJ IDEA (IDE).",
                    "code": ""
                }
            ]
        }
    ]
}