{
    "title": "Fundamentos de Java",
    "description": "Conceitos principais da linguagem e pontos comuns em entrevistas.",
    "subsections": [
        {
            "subtitle": "JVM, JRE e JDK",
            "description": "Componentes centrais da plataforma Java.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "A JVM é a máquina virtual que executa o bytecode, garantindo portabilidade entre sistemas. O JRE inclui a JVM e bibliotecas necessárias para rodar aplicações. O JDK engloba o JRE e adiciona ferramentas de desenvolvimento, como o compilador javac e debugger. Em resumo: JVM executa, JRE roda aplicações, JDK é usado para desenvolver.",
                    "code": "javac Main.java  // compila para bytecode\njava Main       // executa na JVM",
                    "interview_question": "Qual a diferença entre JVM, JRE e JDK?"
                }
            ]
        },
        {
            "subtitle": "Estruturas de Controle",
            "description": "Controle de fluxo em Java.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "If/else decide entre condições, switch organiza múltiplos casos e loops (for, while, for-each) permitem repetição. O enhanced for simplifica iteração sobre coleções. Essas estruturas permitem implementar qualquer lógica de decisão e repetição em programas.",
                    "code": "for(int i=0; i<3; i++) {\n  if(i==1) System.out.println(\"um\");\n  else System.out.println(i);\n}",
                    "interview_question": "Explique as principais estruturas de controle em Java e quando usá-las."
                }
            ]
        },
        {
            "subtitle": "Tipos Primitivos e Wrapper",
            "description": "Diferença entre tipos primitivos e classes wrapper.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Primitivos armazenam valores simples na memória stack (int, double, boolean). Wrappers (Integer, Double, Boolean) são objetos que permitem null, métodos utilitários e integração com coleções genéricas. Autoboxing converte automaticamente entre ambos.",
                    "code": "int x = 5;\nInteger y = null;\nSystem.out.println(Integer.parseInt(\"10\"));",
                    "interview_question": "Qual a diferença entre int e Integer em Java?"
                }
            ]
        },
        {
            "subtitle": "Modificadores de Acesso",
            "description": "Controle de visibilidade de classes e membros.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Public permite acesso em qualquer lugar. Protected restringe ao pacote e a subclasses. Default (sem modificador) limita ao pacote. Private restringe ao escopo da própria classe. Esse controle organiza responsabilidades e garante encapsulamento.",
                    "code": "public class Exemplo {\n  public int a;\n  protected int b;\n  int c;\n  private int d;\n}",
                    "interview_question": "Explique a diferença entre public, protected, default e private."
                }
            ]
        },
        {
            "subtitle": "Palavra-chave static",
            "description": "Uso de variáveis e métodos estáticos.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Static vincula variáveis e métodos à classe, não às instâncias. É útil para constantes compartilhadas, contadores globais e utilitários. Porém, deve ser usado com cautela para não introduzir dependências difíceis de testar.",
                    "code": "class Util {\n  public static final double PI = 3.14;\n  public static int soma(int a, int b){ return a+b; }\n}",
                    "interview_question": "Quando você usaria o modificador static em Java?"
                }
            ]
        },
        {
            "subtitle": "Strings e Imutabilidade",
            "description": "Comportamento de Strings em Java.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Strings são imutáveis: qualquer alteração cria um novo objeto. Isso garante segurança em threads e caching eficiente. Para manipulação intensiva, use StringBuilder ou StringBuffer (thread-safe).",
                    "code": "String s = \"Oi\";\ns = s + \" Marcos\"; // cria nova String",
                    "interview_question": "Por que Strings são imutáveis em Java?"
                }
            ]
        },
        {
            "subtitle": "Tratamento de Exceções",
            "description": "Mecanismo de erro controlado.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Checked Exceptions (como IOException) precisam ser tratadas ou declaradas. Unchecked Exceptions (como NullPointerException) são falhas de programação. O bloco try-catch-finally trata erros e o throws propaga para quem chama.",
                    "code": "try {\n  int x = 10/0;\n} catch (ArithmeticException e) {\n  System.out.println(\"Erro: \" + e.getMessage());\n}",
                    "interview_question": "Qual a diferença entre checked e unchecked exceptions?"
                }
            ]
        },
        {
            "subtitle": "Coleções Básicas",
            "description": "Estruturas mais usadas em Java.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "List mantém ordem e aceita duplicados. Set não permite duplicados. Map armazena pares chave-valor. A escolha depende da necessidade: ordem, busca rápida ou unicidade.",
                    "code": "List<String> lista = new ArrayList<>();\nSet<String> set = new HashSet<>();\nMap<Integer, String> map = new HashMap<>();",
                    "interview_question": "Quando usar List, Set ou Map em Java?"
                }
            ]
        }
    ]
}