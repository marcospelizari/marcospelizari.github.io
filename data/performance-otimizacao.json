{
    "title": "Performance e Otimização",
    "description": "Performance e otimização tornam aplicações Java backend mais rápidas, eficientes e escaláveis. Este guia cobre conceitos básicos para desenvolvedores juniores melhorarem o desempenho de sistemas.",
    "subsections": [
        {
            "subtitle": "O que é performance no backend?",
            "description": "Importância da performance em aplicações backend.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Resposta Ideal: Performance no backend é a velocidade e eficiência com que o sistema responde requisições e usa recursos como CPU e memória. É crucial para melhorar a experiência do usuário, reduzir custos e suportar mais acessos. Técnicas incluem otimizar consultas ao banco, usar cache e gerenciar memória da JVM.<br>Resposta Simples: Performance é fazer o sistema rodar rápido e usar menos recursos, para usuários felizes e mais acessos.",
                    "code": ""
                }
            ]
        },
        {
            "subtitle": "Como otimizar consultas ao banco?",
            "description": "Técnicas para melhorar a eficiência de consultas ao banco de dados.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Resposta Ideal: Otimizar consultas reduz a latência e carga no banco. Técnicas: 1) Usar índices em colunas frequentes (ex.: ID, categoria) para buscas rápidas; 2) Evitar o problema N+1 com JOINs ou fetch otimizado no Spring Data JPA; 3) Limitar dados retornados com consultas específicas. Em Spring Boot, @Query ajuda a criar consultas eficientes.<br>Resposta Simples: Use índices, evite consultas extras e busque só o necessário para o banco responder rápido.",
                    "code": "@Repository\npublic interface ProdutoRepository extends JpaRepository<Produto, Long> {\n    @Query(\"SELECT p FROM Produto p WHERE p.categoria = :categoria\")\n    List<Produto> findByCategoria(@Param(\"categoria\") String categoria);\n}"
                }
            ]
        },
        {
            "subtitle": "O que é caching?",
            "description": "Como usar cache para melhorar performance.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Resposta Ideal: Caching armazena dados frequentes na memória para evitar acessos repetitivos ao banco ou cálculos pesados, reduzindo latência. Em Spring Boot, @Cacheable com Redis ou Ehcache guarda resultados, como uma lista de produtos. É preciso gerenciar a validade do cache para dados atualizados.<br>Resposta Simples: Caching guarda dados na memória para não buscar de novo, como produtos, usando @Cacheable no Spring.",
                    "code": "@Service\npublic class ProdutoService {\n    @Cacheable(value = \"produtos\")\n    public List<Produto> listarProdutos() {\n        return produtoRepository.findAll();\n    }\n}"
                }
            ]
        },
        {
            "subtitle": "Como o Garbage Collector impacta a performance?",
            "description": "Efeitos do Garbage Collector na eficiência da JVM.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Resposta Ideal: O Garbage Collector (GC) da JVM libera memória de objetos não usados, mas pausas durante sua execução podem causar lentidão. Para otimizar: 1) Reduzir criação de objetos desnecessários, como em loops; 2) Monitorar GC com ferramentas como VisualVM; 3) Ajustar parâmetros da JVM (ex.: heap size) ou usar G1 GC para menos pausas. Isso melhora a resposta do sistema.<br>Resposta Simples: O GC limpa memória, mas pode pausar o sistema. Reduza objetos extras e ajuste a JVM para evitar lentidão.",
                    "code": ""
                }
            ]
        },
        {
            "subtitle": "Como usar assincronismo para melhorar performance?",
            "description": "Benefícios de operações assíncronas no backend.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Resposta Ideal: Assincronismo permite executar tarefas sem bloquear a thread principal, melhorando a escalabilidade. Em Spring Boot, @Async ou WebClient executam operações demoradas, como chamadas a APIs externas, em threads separadas. Por exemplo, enviar um e-mail sem esperar a conclusão libera o sistema para outras requisições. É preciso gerenciar erros e sincronização.<br>Resposta Simples: Assincronismo faz tarefas demoradas, como enviar e-mails, sem travar o sistema, usando @Async no Spring.",
                    "code": "@Service\npublic class EmailService {\n    @Async\n    public CompletableFuture<Void> enviarEmail(String destinatario, String mensagem) {\n        // Simula envio lento\n        Thread.sleep(2000);\n        System.out.println(\"Email enviado para \" + destinatario);\n        return CompletableFuture.completedFuture(null);\n    }\n}"
                }
            ]
        }
    ]
}