{
    "title": "APIs (REST e GraphQL)",
    "description": "APIs são essenciais para comunicação entre sistemas no desenvolvimento backend. Este guia cobre os fundamentos de REST e uma introdução ao GraphQL, usados em aplicações Java com Spring Boot, para desenvolvedores juniores.",
    "subsections": [
        {
            "subtitle": "O que é uma API?",
            "description": "Como APIs permitem comunicação entre sistemas.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Resposta Ideal: Uma API (Application Programming Interface) define regras para que sistemas se comuniquem, como um frontend (site ou app) pedindo dados a um backend. Por exemplo, uma API pode listar produtos ou processar pedidos. APIs promovem integração, modularidade e compatibilidade entre tecnologias.<br>Resposta Simples: Uma API é como um garçom que leva pedidos do frontend ao backend e traz a resposta.",
                    "code": ""
                }
            ]
        },
        {
            "subtitle": "O que é REST?",
            "description": "Princípios da arquitetura REST para APIs.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Resposta Ideal: REST (Representational State Transfer) é um estilo de arquitetura para APIs baseado em HTTP. Usa métodos como GET (buscar), POST (criar), PUT (atualizar) e DELETE (excluir) para manipular recursos identificados por URLs (ex.: /produtos). Respostas são em JSON, e APIs REST são stateless (requisições independentes) com códigos de status HTTP (ex.: 200 OK). Em Spring Boot, REST é implementado com anotações como @RestController.<br>Resposta Simples: REST usa HTTP para criar APIs, com URLs como /produtos e comandos como GET ou POST, retornando JSON.",
                    "code": "GET /produtos HTTP/1.1\nHost: api.exemplo.com\n\n// Resposta\n[\n    {\"id\": 1, \"nome\": \"Notebook\", \"preco\": 5000},\n    {\"id\": 2, \"nome\": \"Celular\", \"preco\": 2000}\n]"
                }
            ]
        },
        {
            "subtitle": "O que é GraphQL?",
            "description": "Como GraphQL difere de REST.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Resposta Ideal: GraphQL é uma tecnologia para APIs onde o cliente especifica exatamente os dados que quer, evitando dados desnecessários (overfetching) ou insuficientes (underfetching). Usa uma única URL para consultas (queries) ou mutações (alterações), retornando JSON. Diferente do REST, que tem endpoints fixos, GraphQL é mais flexível. Em Java, usa-se com bibliotecas como graphql-java no Spring Boot.<br>Resposta Simples: GraphQL deixa o cliente escolher quais dados quer, como só nome e preço, diferente do REST que dá tudo.",
                    "code": "query {\n  produtos {\n    nome\n    preco\n  }\n}\n\n// Resposta\n{\n  \"data\": {\n    \"produtos\": [\n      {\"nome\": \"Notebook\", \"preco\": 5000},\n      {\"nome\": \"Celular\", \"preco\": 2000}\n    ]\n  }\n}"
                }
            ]
        },
        {
            "subtitle": "O que são códigos de status HTTP?",
            "description": "Como interpretar respostas de APIs.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Resposta Ideal: Códigos de status HTTP indicam o resultado de uma requisição. Principais categorias: 2xx (sucesso, ex.: 200 OK, 201 Created), 3xx (redirecionamento, ex.: 301 Moved Permanently), 4xx (erros do cliente, ex.: 404 Not Found, 400 Bad Request), 5xx (erros do servidor, ex.: 500 Internal Server Error). Em APIs REST, eles orientam o cliente sobre o sucesso ou falha.<br>Resposta Simples: Códigos como 200 (tudo certo) ou 404 (não encontrado) mostram se a requisição funcionou ou deu erro.",
                    "code": "HTTP/1.1 404 Not Found\nContent-Type: application/json\n\n{\"error\": \"Produto não encontrado\"}"
                }
            ]
        },
        {
            "subtitle": "Como consumir uma API?",
            "description": "Como fazer chamadas a APIs.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Resposta Ideal: Consumir uma API envolve enviar requisições HTTP (GET, POST, etc.) para os endpoints da API e processar as respostas, geralmente em JSON. Em Java, usa-se bibliotecas como RestTemplate ou WebClient (Spring) para fazer chamadas. Por exemplo, um GET para /produtos retorna uma lista de produtos. É importante tratar códigos de status e erros.<br>Resposta Simples: Consumir uma API é chamar seus endpoints, como pedir uma lista de produtos, e usar a resposta, usando ferramentas como RestTemplate.",
                    "code": "import org.springframework.web.client.RestTemplate;\n\npublic class ApiClient {\n    public Produto[] listarProdutos() {\n        RestTemplate restTemplate = new RestTemplate();\n        return restTemplate.getForObject(\"https://api.exemplo.com/produtos\", Produto[].class);\n    }\n}"
                }
            ]
        }
    ]
}