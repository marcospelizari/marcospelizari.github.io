{
  "title": "Spring Boot",
  "description": "Framework que simplifica a criação de aplicações Java modernas.",
  "subsections": [
    {
      "subtitle": "O que é Spring Boot?",
      "description": "Definição e objetivo.",
      "examples": [
        {
          "title": "Explicação",
          "explanation": "Spring Boot é um framework que facilita a criação de aplicações Java prontas para produção. Ele elimina a necessidade de configurações extensas do Spring, fornecendo convenções, autoconfiguração e servidor embutido.",
          "code": "",
          "interview_question": "Explique o que é Spring Boot e por que ele é usado."
        }
      ]
    },
    {
      "subtitle": "Inversão de Controle e Injeção de Dependência",
      "description": "Principais conceitos do Spring.",
      "examples": [
        {
          "title": "Explicação",
          "explanation": "IoC significa que o container gerencia a criação de objetos. Injeção de dependência permite trocar implementações facilmente e reduz acoplamento entre classes.",
          "code": "@Service class PedidoService {\n  private final Repo repo;\n  PedidoService(Repo repo){ this.repo = repo; }\n}",
          "interview_question": "Explique o conceito de Injeção de Dependência no Spring."
        }
      ]
    },
    {
      "subtitle": "Anotações Principais",
      "description": "Facilitam a configuração.",
      "examples": [
        {
          "title": "Explicação",
          "explanation": "@RestController expõe endpoints. @Service define regra de negócio. @Repository integra com banco. @Autowired injeta dependências.",
          "code": "@RestController\nclass Hello {\n  @GetMapping(\"/hi\") String hi(){ return \"oi\"; }\n}",
          "interview_question": "Cite três anotações comuns no Spring Boot e sua função."
        }
      ]
    },
    {
      "subtitle": "Spring Data JPA",
      "description": "Integração com bancos de dados.",
      "examples": [
        {
          "title": "Explicação",
          "explanation": "Spring Data JPA cria repositórios automáticos a partir de interfaces. Permite consultas com pouco código e integra com bancos relacionais via Hibernate.",
          "code": "interface UserRepo extends JpaRepository<User,Long> {\n  Optional<User> findByEmail(String email);\n}",
          "interview_question": "Como o Spring Data JPA facilita o acesso a dados?"
        }
      ]
    }
  ]
}
