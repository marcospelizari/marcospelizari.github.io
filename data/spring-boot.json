{
    "title": "Spring Boot",
    "description": "Spring Boot é um framework Java que simplifica o desenvolvimento de APIs e sistemas backend com configuração automática.",
    "subsections": [
        {
            "subtitle": "Introdução ao Spring Boot",
            "description": "Como o framework funciona.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Spring Boot usa starters (ex.: spring-boot-starter-web) para agrupar dependências e configura servidores embutidos (ex.: Tomcat). Facilita criar APIs REST (Representational State Transfer) robustas.",
                    "code": "<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>"
                }
            ]
        },
        {
            "subtitle": "Injeção de Dependências e Anotações",
            "description": "Como configurar componentes.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "DI (Dependency Injection) fornece objetos automaticamente com @Autowired. Anotações como @RestController, @Service e @Repository definem papéis no sistema.",
                    "code": "@RestController\npublic class ProdutoController {\n    @Autowired\n    private ProdutoService service;\n    @GetMapping(\"/produtos\")\n    public List<Produto> listar() { return service.listar(); }\n}"
                }
            ]
        },
        {
            "subtitle": "Conexão com Banco de Dados",
            "description": "Como integrar com bancos relacionais.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Use o starter spring-boot-starter-data-jpa e configure a conexão no application.properties. O JPA (Java Persistence API) mapeia objetos para tabelas.",
                    "code": "# application.properties\nspring.datasource.url=jdbc:mysql://localhost:3306/banco\nspring.datasource.username=root\nspring.datasource.password=senha\n@Entity\npublic class Produto {\n    @Id\n    private Long id;\n}"
                }
            ]
        },
        {
            "subtitle": "Validação e Tratamento de Erros",
            "description": "Como garantir entradas válidas e gerenciar erros.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Use @Valid para validar dados de entrada. @ControllerAdvice captura exceções e retorna respostas padronizadas, como erros 404.",
                    "code": "@RestController\npublic class ProdutoController {\n    @PostMapping(\"/produtos\")\n    public Produto criar(@Valid @RequestBody Produto produto) {\n        return service.salvar(produto);\n    }\n}\n@ControllerAdvice\npublic class ErrorHandler {\n    @ExceptionHandler(NotFoundException.class)\n    public ResponseEntity<String> handle(NotFoundException ex) {\n        return new ResponseEntity<>(\"Não encontrado\", HttpStatus.NOT_FOUND);\n    }\n}"
                }
            ]
        },
        {
            "subtitle": "Ciclo de Vida e Configuração",
            "description": "Como a aplicação é inicializada.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Spring Boot lê application.properties, inicializa o contexto com DI e levanta o servidor. Configurações como porta são definidas no properties.",
                    "code": "# application.properties\nserver.port=8081"
                }
            ]
        },
        {
            "subtitle": "Recursos para Prática",
            "description": "Ferramentas para aprender Spring Boot.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Use Spring Initializr (projetos), Spring Guides (tutoriais), Baeldung (artigos) e Postman (testes de API).",
                    "code": ""
                }
            ]
        }
    ]
}