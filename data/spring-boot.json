{
    "title": "Spring Boot",
    "description": "Spring Boot é um framework Java que simplifica o desenvolvimento de aplicações, especialmente APIs e sistemas backend. Este guia cobre conceitos fundamentais para desenvolvedores juniores.",
    "subsections": [
        {
            "subtitle": "O que é Spring Boot?",
            "description": "Introdução ao framework e seu funcionamento.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Resposta Ideal: Spring Boot é um framework baseado no Spring que facilita o desenvolvimento de aplicações Java com configuração automática. Ele inclui um servidor embutido (ex.: Tomcat) e configura componentes, como conexões com bancos, com base nas dependências adicionadas. É amplamente usado para criar APIs e sistemas backend robustos.<br>Resposta Simples: Spring Boot é uma ferramenta que torna mais fácil criar aplicações Java, configurando coisas automaticamente.",
                    "code": ""
                }
            ]
        },
        {
            "subtitle": "O que são starters?",
            "description": "Como usar starters para simplificar dependências.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Resposta Ideal: Starters são dependências do Spring Boot que agrupam bibliotecas para tarefas específicas, como 'spring-boot-starter-web' para APIs web ou 'spring-boot-starter-data-jpa' para bancos de dados. Basta adicioná-los ao projeto (ex.: em pom.xml para Maven), e o Spring Boot configura tudo automaticamente.<br>Resposta Simples: Starters são pacotes que trazem tudo necessário para algo, como criar uma API, e o Spring configura sozinho.",
                    "code": "<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>"
                }
            ]
        },
        {
            "subtitle": "O que é injeção de dependências?",
            "description": "Como o Spring gerencia dependências automaticamente.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Resposta Ideal: Injeção de dependências é quando o Spring fornece objetos que uma classe precisa, em vez de ela criá-los. Por exemplo, um serviço pode receber um repositório via @Autowired, reduzindo acoplamento e facilitando testes e manutenção. O Spring gerencia isso pelo contexto da aplicação.<br>Resposta Simples: O Spring dá os objetos que uma classe precisa automaticamente, usando @Autowired.",
                    "code": "import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class ProdutoService {\n    @Autowired\n    private ProdutoRepository repository;\n\n    public Produto salvar(Produto produto) {\n        return repository.save(produto);\n    }\n}"
                }
            ]
        },
        {
            "subtitle": "O que é o arquivo de configuração?",
            "description": "Como configurar uma aplicação Spring Boot.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Resposta Ideal: O arquivo de configuração, como 'application.properties' ou 'application.yml', define opções da aplicação, como porta do servidor ou conexão com banco. O Spring Boot lê esse arquivo ao iniciar e aplica as configurações automaticamente, simplificando ajustes.<br>Resposta Simples: É um arquivo onde coloco configurações, como porta ou banco, e o Spring usa isso ao iniciar.",
                    "code": "# application.properties\nserver.port=8081\nspring.datasource.url=jdbc:mysql://localhost:3306/meubanco\nspring.datasource.username=root\nspring.datasource.password=senha"
                }
            ]
        },
        {
            "subtitle": "Como conectar ao banco de dados?",
            "description": "Como o Spring Boot gerencia conexões com bancos relacionais.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Resposta Ideal: Spring Boot usa o starter 'spring-boot-starter-data-jpa' para conectar a bancos relacionais (ex.: MySQL). Configura-se a conexão no 'application.properties' com URL, usuário e senha. O JPA mapeia objetos Java para tabelas, permitindo operações sem SQL manual.<br>Resposta Simples: Adiciono um starter, configuro o banco no arquivo de propriedades, e o Spring conecta e mapeia os dados automaticamente.",
                    "code": "# application.properties\nspring.datasource.url=jdbc:mysql://localhost:3306/meubanco\nspring.datasource.username=root\nspring.datasource.password=senha\n\n@Entity\npublic class Produto {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    private String nome;\n    private double preco;\n    // getters e setters\n}"
                }
            ]
        },
        {
            "subtitle": "O que são anotações no Spring Boot?",
            "description": "Principais anotações e seus papéis.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Resposta Ideal: Anotações são marcações que orientam o Spring sobre como configurar a aplicação. Principais: @SpringBootApplication (inicia a aplicação), @RestController (lida com requisições HTTP), @Service (define lógica de negócios), @Repository (acessa banco de dados) e @Autowired (injeta dependências). Elas simplificam o código e a configuração.<br>Resposta Simples: Anotações dizem ao Spring o que fazer, como @RestController para APIs ou @Autowired para injetar objetos.",
                    "code": "import org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n@RestController\npublic class ProdutoController {\n    @Autowired\n    private ProdutoService service;\n\n    @GetMapping(\"/produtos\")\n    public List<Produto> listar() {\n        return service.listar();\n    }\n}"
                }
            ]
        },
        {
            "subtitle": "O que é o ciclo de vida da aplicação?",
            "description": "Como uma aplicação Spring Boot é inicializada e executada.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Resposta Ideal: O ciclo de vida começa com a leitura do 'application.properties' para configurações. O Spring inicializa o contexto, criando e injetando dependências (ex.: serviços, repositórios). O servidor embutido (ex.: Tomcat) é iniciado, e a aplicação passa a processar requisições até ser encerrada, quando recursos são liberados.<br>Resposta Simples: O Spring lê as configurações, cria os componentes, inicia o servidor e aceita requisições até parar.",
                    "code": ""
                }
            ]
        },
        {
            "subtitle": "Como criar uma API REST?",
            "description": "Como construir uma API REST com Spring Boot.",
            "examples": [
                {
                    "title": "Explicação",
                    "explanation": "Resposta Ideal: Uma API REST é criada com o starter 'spring-boot-starter-web', usando @RestController para definir endpoints. Anotações como @GetMapping, @PostMapping, etc., mapeiam requisições HTTP (GET, POST) a métodos que retornam dados, geralmente em JSON. O Spring gerencia as requisições e respostas automaticamente.<br>Resposta Simples: Uso @RestController para criar endpoints que respondem a chamadas HTTP, como listar produtos em JSON.",
                    "code": "import org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(\"/api/produtos\")\npublic class ProdutoController {\n    @Autowired\n    private ProdutoService service;\n\n    @GetMapping\n    public List<Produto> listar() {\n        return service.listar();\n    }\n\n    @PostMapping\n    public Produto criar(@RequestBody Produto produto) {\n        return service.salvar(produto);\n    }\n}"
                }
            ]
        }
    ]
}